"use client";
import { PDFDocument, rgb } from "pdf-lib";
import { useContext, useState } from "react";
import Link from "next/link";
import EmblaCarousel from "@/components/Carousel";
import { Trash2 } from "lucide-react";
import { FavoritesContext } from "../favoritecontext/page";

export default function FavoritesPage() {
  const { favorites, removeFavorite } = useContext(FavoritesContext);
  const [visiblePhones, setVisiblePhones] = useState(new Set());

  const togglePhone = (id) => {
    setVisiblePhones((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  if (favorites.length === 0) {
    return (
      <p className="flex justify-center items-center p-4 text-gray-600">
        No items in your favorites list.
      </p>
    );
  }
  // Funktion zum Erstellen der PDF
  const handleExportPDF = async (product) => {
    try {
      const imageUrl = product.image[0]; // Use the first image from the array

      if (!imageUrl) {
        console.error("Image URL is invalid or undefined:", imageUrl);
        return;
      }

      console.log("Original Image URL:", imageUrl);

      // Handle local and external images
      const validImageUrl = imageUrl.startsWith("https://")
        ? imageUrl // Use external URL as-is
        : window.location.origin + imageUrl; // Prepend origin for local images

      console.log("Valid Image URL:", validImageUrl);

      // Check the image format
      const isWebp = validImageUrl.endsWith(".webp");
      if (isWebp) {
        console.warn(
          "Skipping unsupported image format (webp):",
          validImageUrl
        );
        alert("The image format (webp) is not supported for PDF export.");
        return;
      }

      // Fetch the image
      let imgBytes;
      try {
        const imgResponse = await fetch(validImageUrl);
        if (!imgResponse.ok) {
          throw new Error(`Error loading image: ${imgResponse.statusText}`);
        }
        imgBytes = await imgResponse.arrayBuffer();
      } catch (error) {
        console.warn("Failed to fetch image, skipping image embedding:", error);
        imgBytes = null;
      }

      // Create a new PDF document
      const pdfDoc = await PDFDocument.create();
      const page = pdfDoc.addPage([600, 800]);
      let y = 750;

      // Title of the PDF
      page.drawText("Vehicle Details - PDF Document", {
        x: 50,
        y,
        size: 20,
        color: rgb(0, 0, 0),
      });

      y -= 40;

      // Vehicle information
      page.drawText(`Name: ${product.name}`, {
        x: 50,
        y,
        size: 14,
        color: rgb(0.1, 0.1, 0.1),
      });
      y -= 24;

      page.drawText(`Price: €${product.price.toLocaleString()}`, {
        x: 50,
        y,
        size: 14,
        color: rgb(0.1, 0.1, 0.1),
      });
      y -= 24;

      page.drawText(`Description: ${product.description}`, {
        x: 50,
        y,
        size: 14,
        color: rgb(0.1, 0.1, 0.1),
      });
      y -= 24;

      // Embed the image into the PDF if available
      if (imgBytes) {
        const img = validImageUrl.endsWith(".webp")
          ? await pdfDoc.embedPng(imgBytes)
          : await pdfDoc.embedJpg(imgBytes);

        const { width, height } = img.scale(0.4);

        page.drawImage(img, {
          x: 50,
          y: y - height - 20,
          width,
          height,
        });
      }

      // Footer
      page.drawText("Generated by KRC Cars", {
        x: 50,
        y: 30,
        size: 10,
        color: rgb(0.5, 0.5, 0.5),
      });

      // Generate the PDF bytes
      const pdfBytes = await pdfDoc.save();

      // Create a Blob and open the PDF in a new tab
      const url = URL.createObjectURL(
        new Blob([pdfBytes], { type: "application/pdf" })
      );

      const link = document.createElement("a");
      link.href = url;
      link.download = `${product.name.replace(/\s+/g, "_")}_Details.pdf`;
      link.target = "_blank";
      link.click();

      // Revoke the URL after opening
      setTimeout(() => {
        URL.revokeObjectURL(url);
      }, 1000);
    } catch (error) {
      console.error("Error creating PDF:", error);
    }
  };

  return (
    <div className="p-4 w-2/3 mx-auto -mt-36">
      <h1 className="text-2xl font-semibold mb-4">Your Favorites</h1>
      <div className="space-y-4">
        {favorites.map((product) => (
          <li
            key={product.id}
            className="flex flex-col md:flex-row items-center justify-between gap-6 border p-4 rounded-md shadow-sm"
          >
            <div className="w-full md:w-1/2 rounded-4xl overflow-hidden ">
              {product.image ? (
                <EmblaCarousel
                  slides={
                    Array.isArray(product.image)
                      ? product.image
                      : [product.image]
                  }
                />
              ) : (
                <div>No images available</div>
              )}
            </div>

            <div className="flex gap-4 flex-col w-full md:w-1/2">
              <h1 className="text-3xl font-bold mb-4">{product.name}</h1>
              <p className="text-gray-700 mb-8 border-b-1 pb-8 border-gray-200">
                {product.description}
              </p>
              <p className="text-2xl font-bold mb-6 border-b-1 pb-8 border-gray-200">
                € {product.price.toLocaleString()}
              </p>
              <div className="flex flex-col justify-center items-start md:flex-row gap-4">
                <Link href="/contact">
                  <button className="bg-blue-500 hover:bg-blue-400 cursor-pointer p-2 rounded-lg shadow-md text-xs text-white">
                    Contact Seller
                  </button>
                </Link>

                <button
                  onClick={() => togglePhone(product.id)}
                  className="bg-blue-500 hover:bg-blue-400 cursor-pointer p-2 rounded-lg shadow-md text-xs text-white"
                >
                  {visiblePhones.has(product.id)
                    ? product.sellerPhone
                    : "Show Phone Number"}
                </button>

                <button
                  onClick={() => handleExportPDF(product)}
                  className="bg-blue-500 hover:bg-blue-400 cursor-pointer p-2 rounded-lg shadow-md text-xs text-white"
                >
                  Export as PDF
                </button>
                <button
                  onClick={() => removeFavorite(product.id)}
                  className="mt-2 text-red-500 hover:text-red-700 cursor-pointer flex items-center"
                >
                  <Trash2 className="w-5 h-5 mr-1" />
                  Remove
                </button>
              </div>
            </div>
          </li>
        ))}
      </div>
    </div>
  );
}
